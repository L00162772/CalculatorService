name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-unit-tests:
    runs-on: Ubuntu-20.04
    steps:
    - uses: actions/checkout@master
    - name: Set up JDK 15
      uses: actions/setup-java@master
      with:
        java-version: 15
    - name: Build with Maven - run unit tests
      run: mvn -B clean install

  run-integration-tests:
    needs: run-unit-tests
    runs-on: Ubuntu-20.04
    steps:
    - uses: actions/checkout@master
    - name: Set up JDK 15
      uses: actions/setup-java@master
      with:
        java-version: 15
    - name: Build with Maven - run integration tests
      run: mvn -B clean install -PintegrationTest

  run-postman-tests:
    needs: run-integration-tests
    runs-on: Ubuntu-20.04
    steps:
    - uses: actions/checkout@master
    - name: Set up JDK 15
      uses: actions/setup-java@master
      with:
        java-version: 15
    - name: Build and run Docker image
      run: |
        # docker build -t calculatorservice .
        # nohup docker run -p 8080:8080 calculatorservice &
        mvn -B clean package -DskipTests=true &&
        docker-compose -f docker-compose.yml up -d
    - name: Wait for Service To Start
      uses: nev7n/wait_for_response@v1
      with:
        url: 'http://localhost:8080/health'
        responseCode: 200
        timeout: 30000
        interval: 500    
    - name: Run Newman tests
      uses: matt-ball/newman-action@master
      with:
        collection: postman/CalculatorService.postman_collection.json
        environment: postman/CalculatorServiceDev.postman_environment.json

  deploy-to-ecs:
    needs: run-postman-tests
    runs-on: Ubuntu-20.04
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: calculatorservice
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: calculatorservice-container
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: my-service
        cluster: my-cluster
        wait-for-service-stability: true     
